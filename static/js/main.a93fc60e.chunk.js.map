{"version":3,"sources":["components/MyGoogleMapReact/MyGoogleMapsReact.jsx","components/MyGoogleMapReact/createInfoWindow.js","components/LocalStorageSample/LocalStorageSample.tsx","components/TestPage/logo.svg","components/TestPage/TestPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyGoogleMapReact","locTokyoSta","lat","lng","infoTokyoSta","title","content","useState","mapObj","setMapObj","marker","setMarker","address","setAddress","search","map","maps","geocoder","geocode","results","status","GeocoderStatus","OK","location","geometry","setCenter","setMap","Marker","position","className","placeholder","type","onChange","e","target","value","onKeyPress","key","onClick","style","height","width","bootstrapURLKeys","process","defaultCenter","defaultZoom","onGoogleApiLoaded","Geocoder","info","infoWindow","InfoWindow","addListener","open","anchor","shouldFocus","createInfoWindow","LocalStorageSample","storageKey","iconList","iconHistory","setIconHistory","handleIconClick","iconId","currentTarget","getAttribute","console","log","newHistory","Set","jsonData","JSON","stringify","localStorage","setItem","useEffect","getItem","parse","removeItem","item","icon-id","TestPage","message","src","logo","alt","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a93fc60e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport { createInfoWindow } from \"./createInfoWindow\";\n\nconst MyGoogleMapReact = () => {\n  const locTokyoSta = {\n    // latitude 経度\n    lat: 35.681393045732996,\n    // longitude 経度\n    lng: 139.7671355265047,\n  };\n\n  const infoTokyoSta = {\n    title: `東京駅 <a href=\"https://ja.wikipedia.org/wiki/%E6%9D%B1%E4%BA%AC%E9%A7%85\" target=\"_blank\" rel=\"noopener noreferrer\">[Wikipedia]</a>`,\n    content: `<br/>東京駅（とうきょうえき）は、東京都千代田区丸の内一丁目にある、東日本旅客鉄道（JR東日本）、東海旅客鉄道（JR東海）、東京地下鉄（東京メトロ）の駅である。JR東日本の在来線と新幹線各路線、JR東海の東海道新幹線、地下鉄丸ノ内線が発着するターミナル駅である。`,\n  };\n\n  // 検索\n  const [mapObj, setMapObj] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [address, setAddress] = useState(\"\");\n  const search = () => {\n    const { map, maps, geocoder } = mapObj;\n    // 入力されたワードで検索\n    geocoder.geocode({ address }, (results, status) => {\n      // ヒットしたら\n      if (status === maps.GeocoderStatus.OK) {\n        // フォーカス\n        const location = results[0].geometry.location;\n        map.setCenter(location);\n        // マーカー表示\n        if (marker) {\n          marker.setMap(null);\n        }\n        setMarker(\n          new maps.Marker({\n            map,\n            position: location,\n          })\n        );\n      }\n    });\n  };\n\n  const handleApiLoaded = ({ map, maps }) => {\n    // 検索に使用\n    const geocoder = new maps.Geocoder();\n    setMapObj({ map, maps, geocoder });\n    // マーカー表示\n    const marker = new maps.Marker({ map, position: locTokyoSta });\n    createInfoWindow(map, maps, marker, infoTokyoSta);\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center mb-1 justify-center\">\n        {/* 入力フォーム */}\n        <input\n          className=\"w-4/6 border-2 border-primary bg-red transition h-12 rounded-md focus:outline-none text-black text-lg \"\n          placeholder=\"東京駅\"\n          type=\"search\"\n          onChange={(e) => setAddress(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") search();\n          }}\n          value={address}\n        />\n        {/* 検索ボタン */}\n        <button\n          className=\"w-2/6 bg-blue-500 text-white h-12 py-2 px-4 ml-4 border border-blue-500 rounded\"\n          type=\"button\"\n          onClick={() => search()}\n        >\n          Search\n        </button>\n      </div>\n      {/* GoogleMapsエリア */}\n      <div style={{ height: \"80vh\", width: \"100%\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n          defaultCenter={locTokyoSta}\n          defaultZoom={15}\n          onGoogleApiLoaded={handleApiLoaded}\n        ></GoogleMapReact>\n      </div>\n    </>\n  );\n};\n\nexport default MyGoogleMapReact;\n","\nexport const createInfoWindow = (map, maps, marker, info) => {\n  const content = `\n    <div id=\"content>\n      <div id=\"siteNotice\">\n      </div>\n      <h1 id=\"firstHeading\" class=\"firstHeading\">\n        ${info.title}\n      </h1>\n      <div id=\"bodyContent\">\n        ${info.content}\n      </div>\n    </div>\n  `;\n\n  const infoWindow = new maps.InfoWindow({\n    content: content,\n  });\n  marker.addListener(\"click\", () => {\n    infoWindow.open({\n      anchor: marker,\n      map,\n      shouldFocus: false,\n    });\n  });\n  return infoWindow;\n};\n","import React, { useState, useEffect } from 'react'\nimport './LocalStorageSample.css'\n\n\nconst LocalStorageSample: React.FC = () => {\n  const storageKey = 'mystorage'\n  const iconList = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O']\n  const [iconHistory, setIconHistory] = useState<string[]>([]);\n\n  // LocalStorageから選択履歴読込\n  useEffect(() => {\n    const jsonData = localStorage.getItem(storageKey)\n    if(jsonData !== null) {\n      setIconHistory(JSON.parse(jsonData))\n    }\n  }, []);\n\n  // アイコンがクリックされたら選択履歴保存\n  function handleIconClick(e: React.MouseEvent<HTMLButtonElement>) {\n    const iconId = e.currentTarget.getAttribute(\"icon-id\")\n    console.log(iconId)\n    if (iconId === null) {\n      return\n    }\n    // クリックされたアイコンを履歴の先頭に追加。重複は削除\n    let newHistory = [iconId, ...iconHistory]\n    newHistory = [...new Set(newHistory)]\n    // JSON形式に変換しlocalStorageに保存\n    const jsonData = JSON.stringify(newHistory)\n    localStorage.setItem(storageKey, jsonData);\n    setIconHistory(newHistory)\n  }\n\n  // 削除ボタンがクリックされたら選択履歴削除\n  function handleClearClick(e: React.MouseEvent<HTMLButtonElement>) {\n    localStorage.removeItem(storageKey)\n    setIconHistory([])\n  }\n\n  return (\n    <div className=\"ls-container\">\n      <h1 className=\"ls-h1\">Local Storageサンプル</h1>\n      <p className=\"ls-p\">\n        アイコンをクリックすると選択履歴が保存される<br/>\n        Chromeなら[F12]→ApplicationでLocal Storage確認可\n      </p>\n      <button className=\"ls-clear\" onClick={handleClearClick}>削除</button>\n      <hr/>\n\n      <h2 className=\"ls-h2\">アイコン</h2>\n      <div className=\"ls-icon-wrapper\">\n        {iconList && iconList.map(item => (\n          <button key={item} icon-id={item} className=\"ls-icon\" onClick={handleIconClick}>{item}</button>\n        ))}\n      </div>\n      <hr/>\n\n      <h2 className=\"ls-h2\">選択履歴</h2>\n      <div className=\"ls-icon-wrapper\">\n        {iconHistory && iconHistory.map(item => (\n          <button key={item + \"a\"} icon-id={item} className=\"ls-icon\" onClick={handleIconClick}>{item}</button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default LocalStorageSample","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\ntype Props = {\n  message: string;\n}\n\nconst TestPage: React.FC<Props> = ({message}) => {\n  return(\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>{message}</p>\n      </header>\n    </div>\n  )\n}\n\nexport default TestPage;","import React from 'react';\nimport { HashRouter, Routes, Route, Link } from 'react-router-dom'\nimport MyGoogleMapReact from './components/MyGoogleMapReact/MyGoogleMapsReact';\nimport LocalStorageSample from './components/LocalStorageSample/LocalStorageSample';\nimport TestPage from './components/TestPage/TestPage';\n\n\n\nconst App: React.FC = () => {\n  return (\n    <HashRouter>\n      <header className=\"items-center justify-between flex bg-gray-800 bg-opacity-90 px-12 py-4 my-4 mx-auto shadow-2xl w-11/12\">\n        <div className=\"text-2xl text-white font-semibold inline-flex items-center\">\n            <Link to='/'>React Sample</Link>\n        </div>\n        <div>\n          <ul className=\"flex text-white\">\n            <li className=\"ml-5 px-2 py-1\"><Link to='/'>Map</Link></li>\n            <li className=\"ml-5 px-2 py-1\"><Link to='/localstrage'>LocalStrage</Link></li>\n            <li className=\"ml-5 px-2 py-1\"><Link to='/page1'>Page1</Link></li>\n          </ul>\n        </div>\n      </header>\n      <div className=\"container mx-auto\">\n        <Routes>\n          <Route path='/localstrage' element={<LocalStorageSample />} />\n          <Route path='/page1' element={<TestPage message=\"Page 1\" />} />\n          <Route path='/' element={<MyGoogleMapReact />} />\n          <Route element={<MyGoogleMapReact />} />\n        </Routes>\n\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}